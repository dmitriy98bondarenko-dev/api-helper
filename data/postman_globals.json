{
  "id": "b9e3e1f0-f3fc-4166-803e-60714be32012",
  "values": [
    {
      "key": "appUid",
      "value": "8a51ef4027d444f7bee746e1e4fb6f51",
      "type": "default",
      "enabled": true
    },
    {
      "key": "clientId",
      "value": "6289de851fc726f887af8d5d7a56c635",
      "type": "default",
      "enabled": true
    },
    {
      "key": "fetchAuthTokensFn",
      "value": "function fetchAuthTokens(config) {\n    return new Promise((resolve, reject) => {\n        pm.sendRequest({\n            url: pm.environment.get(config.host) + '/api/v1/auth',\n            method: 'POST',\n            header: { 'Content-Type': 'application/json' },\n            body: {\n                mode: 'raw',\n                raw: JSON.stringify({\n                    contact: pm.environment.get(config.username),\n                    password: pm.environment.get(config.password),\n                    grant_type: \"password\",\n                    device_id: pm.globals.get(\"appUid\"),\n                    client_id: pm.globals.get(\"clientId\")\n                })\n            }\n        }, function (error, result) {\n            if (error) {\n                console.log(`Помилка при запиті авторизації для ${config.tokenName}:`, error);\n                reject(error);\n                return;\n            }\n            if (result.code === 200) {\n                const responseJson = result.json();\n                const token = responseJson.access_token;\n                if (token) {\n                    pm.collectionVariables.set(config.tokenName, token);\n                    console.log(`Токен ${config.tokenName} збережено:`, token);\n                    resolve(token);\n                } else {\n                    reject(new Error(\"Token not found\"));\n                }\n            } else {\n                reject(new Error(`Auth error ${result.code}`));\n            }\n        });\n    });\n}",
      "type": "default",
      "enabled": true
    },
    {
      "key": "decodeTockenAndSaveUserIdFn",
      "value": "function decodeTockenAndSaveUserId(config){\n    let decoded;\n    let parts = config.token.split(\".\");\n    if (parts.length === 3) {\n        let payload = parts[1];\n\n        payload = payload.replace(/-/g, \"+\").replace(/_/g, \"/\");\n\n        decoded = JSON.parse(atob(payload));\n\n        console.log(\"JWT payload:\", decoded);\n\n    } else {\n        console.log(\"Некоректний JWT токен\");\n    }\n\n    pm.environment.set(config.uidName, decoded.nameid)\n    console.log(`Id saved in ${config.uidName}`, decoded.nameid)\n}",
      "type": "default",
      "enabled": true
    },
    {
      "key": "deferred_filter_id",
      "value": "185ad2f0-bbcb-471b-add2-ad5243475331",
      "type": "any",
      "enabled": true
    }
  ],
  "name": "Globals",
  "_postman_variable_scope": "globals",
  "_postman_exported_at": "2025-09-27T14:10:19.438Z",
  "_postman_exported_using": "Postman/11.64.3"
}